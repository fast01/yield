Yield is a high-performance, event-driven application server written in portable (Win32, Linux, OS X) C++. It features include:

    * A minimalist platform library for Win32, Linux, FreeBSD/OS X, and Solaris
    * Staged, event-driven concurrency (see below)
    * TCP, SSL, and UDP non-blocking and asynchronous socket I/O
    * HTTP and ONC-RPC protocol implementations
    * Extensive xUnit-like unit tests 

Yield's concurrency architecture is based on the concept of stages for parallelizing CPU-intensive code (gzipping, parsing, serialization) and offloading blocking calls (disk I/O, DNS lookups). A stage is a unit of concurrency: two stages can always run on two different physical processors with minimal synchronization (typically non-blocking event queues between stages). My dissertation research was on the problem of how to schedule the stages of a network server on multicore machines in order to increase a server's throughput.

Servers implemented using Yield:

    * HTTP static file servers in C++ and Python/C++, benchmarked with httperf generating a SPECweb99-like workload
    * Back end image processing pipelines (decode JPEG, scale, crop, blur, encode JPEG) in C++ for web applications, benchmarked with a custom client and real application data
    * English Wikipedia page lookup and keyword search engine, benchmarked with httperf with URI logs synthesized from Wikipedia page statistics
    * SMTP server with in-process spam engine in Lua, benchmarked with a custom workload derived from SPECmail2001 and TREC spam corpus
    * WebDAV servers in C++, Python, and Python/C++
    * RUBiS benchmark auction server implementation with MySQL backend 